{"version":3,"sources":["components/form/form.module.scss","features/toDo/toDoSlice.js","components/form/Form.js","components/showingList/DisplayedTask.js","components/actionBar/actionFooter/ActionFooter.js","App.js","app/store.js","index.js","components/showingList/showingList.module.scss","components/actionBar/actionFooter/actionFooter.module.scss"],"names":["module","exports","toDoSlice","createSlice","name","initialState","items","toggleForm","reducers","addItem","state","action","push","payload","isDoneItem","find","item","id","done","showingForm","clearList","pop","actions","Form","dispatch","useDispatch","refDate","useRef","refTime","refData","useEffect","current","focus","className","styles","container","htmlFor","ref","type","onClick","date","time","data","value","task","event","preventDefault","DisplayedTask","selectorItems","useSelector","toDoItems","map","td","toggleTaskIsDone","toggleTaskToDo","ActionFooter","selector","selectorItem","styleActionToDo","more","completed","App","useState","listTitle","setListTitle","titleRef","onChange","placeholder","toggleDisplayForm","inputRef","store","configureStore","reducer","toDoReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2d3b52a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"form_container__1Q-3n\"};","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    items: [],\r\n    toggleForm: false,\r\n}\r\n\r\nexport const toDoSlice = createSlice({\r\n    name: \"todo\",\r\n    initialState,\r\n    reducers: {\r\n        addItem: (state, action) => {\r\n            state.items.push(action.payload)\r\n        },\r\n        isDoneItem: (state, action) => {\r\n            state.items.find((item) => {\r\n                if (action.payload === item.id)\r\n                    item.done = !item.done\r\n            })\r\n\r\n            // task.done = !task.done\r\n        },\r\n        showingForm: (state, action) => {\r\n            state.toggleForm = action.payload\r\n        },\r\n        clearList: (state, action) => {\r\n            if (state.items.done){\r\n                state.items.pop(action.payload)\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const {addItem, isDoneItem, showingForm, clearList} = toDoSlice.actions\r\nexport default toDoSlice.reducer\r\n","import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addItem, showingForm} from \"../../features/toDo/toDoSlice\";\r\nimport styles from \"./form.module.scss\"\r\nimport uniqid from \"uniqid\"\r\n\r\nlet id = 0;\r\n\r\nfunction Form() {\r\n    const dispatch = useDispatch()\r\n    const refDate = useRef(\"\")\r\n    const refTime = useRef(\"\")\r\n    const refData = useRef(\"\")\r\n    const onSubmit = (date, time, data) => {\r\n        dispatch(showingForm(false))\r\n        dispatch(addItem({\r\n            id: ++id,\r\n            date: date,\r\n            time: time,\r\n            task: data,\r\n            done: false\r\n        }))\r\n    }\r\n    // Field focus\r\n    useEffect(() => {\r\n        refData.current.focus()\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div className={\"card card-body my-2\"} id={styles.container}>\r\n                <form className={\" d-flex flex-column\"}>\r\n                    <label className={\"fw-bold text-center text-light h3\"} htmlFor=\"newTask\">New task</label>\r\n                    <input ref={refDate} type=\"date\" className={\"form-control text-center my-2\"}/>\r\n                    <input ref={refTime} type=\"time\" className={\"form-control text-center my-2\"}/>\r\n                    <input ref={refData} className={\"form-control text-center my-2\"}/>\r\n                    <div className={\"d-flex justify-content-center align-items-center my-3\"}>\r\n                        <input className={\"btn btn-success border shadow-lg mx-2\"} onClick={() => {\r\n                            onSubmit(refDate.current.value, refTime.current.value, refData.current.value)\r\n                        }} type=\"submit\" value={\"Add task\"}/>\r\n                        <button className={\"btn btn-danger border mx-2\"} onClick={(event) => {\r\n                            event.preventDefault()\r\n                            dispatch(showingForm(false))\r\n                        }}>Cancel\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport styles from \"./showingList.module.scss\"\r\nimport {isDoneItem} from \"../../features/toDo/toDoSlice\";\r\n\r\nfunction DisplayedTask() {\r\n    const selectorItems = useSelector((state) => {\r\n        return state.toDoItems.items\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className={\"m-5 p-2\"} id={styles.container}>\r\n            <h3\r\n                className={\"text-light fw-bold bg-dark d-flex flex-row justify-content-center mb-2 p-2 rounded align-items-center\"}>\r\n                <div className={\"mx-5\"}>Content</div>\r\n            </h3>\r\n            <div className={\"d-flex flex-column justify-content-lg-around mx-5\"}>{selectorItems.map((td) => {\r\n                return (\r\n                    td.done ?\r\n                    (<div key={td.id} className={\"bg-light\"} >\r\n                        <div className={\"d-flex justify-content-between align-items-center\"}>\r\n                            <h5 key={td.item} className={\"text-muted text-decoration-line-through\"}>{td.task}</h5>\r\n                            <input className={styles.toggleTaskIsDone} type=\"submit\" value={\"is done\"} onClick={() => {\r\n                                dispatch(isDoneItem(td.id))\r\n                            }}/>\r\n                        </div>\r\n                    </div>) : (<div key={td.id}>\r\n                            <div className={\"col w-100 text d-flex justify-content-between align-items-center \"}>\r\n                                <p className={\"col\"} id={styles.date}><span className={\"text-dark fw-light h6\"}>Date:</span> {td.date}</p>\r\n                                <p className={\"col\"}><span className={\"text-dark fw-light h6\"}>Time:</span> {td.time}</p>\r\n                                <h5 className={\"col\"} key={td.item}>{td.task}</h5>\r\n                                <input className={styles.toggleTaskToDo} type=\"submit\" value={\"to do\"} onClick={() => {\r\n                                    dispatch(isDoneItem(td.id))\r\n                                }}/>\r\n                            </div>\r\n                        </div>)\r\n                )\r\n            })}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayedTask","import React from 'react';\r\nimport styleActionToDo from \"./actionFooter.module.scss\"\r\nimport Form from \"../../form/Form\";\r\nimport DisplayedTask from \"../../showingList/DisplayedTask\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {showingForm, clearList} from \"../../../features/toDo/toDoSlice\";\r\n\r\nfunction ActionFooter() {\r\n    const selector = useSelector((state) => {\r\n        return state.toDoItems.toggleForm\r\n    })\r\n    const selectorItem = useSelector((state)=>{\r\n        return state.toDoItems.items\r\n    })\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <div>\r\n            {selector ? <Form/> : <DisplayedTask/>}\r\n            <section className={styleActionToDo.container}>\r\n                <button className={styleActionToDo.more} onClick={() => {\r\n                    dispatch(showingForm(true))\r\n                }}> +\r\n                </button>\r\n                <button className={styleActionToDo.completed} onClick={() => {\r\n                    dispatch(clearList(selectorItem))\r\n                }} >clear done tasks</button>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActionFooter;","import React, {useRef, useState} from \"react\"\r\nimport './App.scss';\r\nimport ActionFooter from \"./components/actionBar/actionFooter/ActionFooter\";\r\nimport {showingForm} from \"./features/toDo/toDoSlice\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nfunction App() {\r\n    const [listTitle, setListTitle] = useState(\"\")\r\n    const titleRef = useRef(null)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    function inputFocus(item) {\r\n        item.current.focus()\r\n    }\r\n\r\n    function changeTitle() {\r\n        setListTitle(titleRef.current.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div id={\"container\"} className = \"App card card-body overflow-scroll position-relative\">\r\n                <h1 className={\r\n                    \"fw-bold text-center p-2\" +\r\n                    \"  w-50 mx-auto mt-2 text-dark\"\r\n                } id={\"title\"}>\r\n                    {listTitle}\r\n                </h1>\r\n                <input ref={titleRef} className={'w-25 mx-auto bg-light'} type=\"text\" onChange={() => {\r\n                    changeTitle()\r\n                }} id={'title'} placeholder={'Your list title here ...'}/>\r\n\r\n                    <ActionFooter toggleDisplayForm={dispatch(showingForm)} inputRef={inputFocus}/>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport toDoReducer from \"../features/toDo/toDoSlice\"\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        toDoItems: toDoReducer\r\n    }\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"showingList_container__1y52I\",\"toggleTaskToDo\":\"showingList_toggleTaskToDo__33knp\",\"toggleTaskIsDone\":\"showingList_toggleTaskIsDone__FAh8q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completed\":\"actionFooter_completed__1zP3W\",\"container\":\"actionFooter_container__NWMcM\",\"more\":\"actionFooter_more__2FapF\",\"search\":\"actionFooter_search__1xaIc\"};"],"sourceRoot":""}