{"version":3,"sources":["features/toDo/toDoSlice.js","components/form/Form.js","components/showingList/ShowingList.js","components/actionBar/addItem/AddItem.js","App.js","app/store.js","index.js","components/actionBar/addItem/addItem.module.scss","components/showingList/showingList.module.scss"],"names":["toDoSlice","createSlice","name","initialState","items","toggleForm","reducers","addItem","state","action","push","payload","isDoneItem","forEach","item","id","isDone","showingForm","actions","Form","dispatch","useDispatch","ref","useRef","useEffect","current","focus","className","onSubmit","data","value","uniqid","date","Date","toLocaleDateString","task","htmlFor","type","ShowingList","selector","useSelector","toDoItems","styles","container","map","td","remove","onClick","AddItem","styleActionToDo","more","completed","App","useState","listTitle","setListTitle","titleRef","onChange","placeholder","toggleDisplayForm","inputRef","store","configureStore","reducer","toDoReducer","console","log","getState","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ec4ffab4.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    items: [],\r\n    toggleForm: false,\r\n}\r\n\r\nexport const toDoSlice = createSlice({\r\n    name: \"todo\",\r\n    initialState,\r\n    reducers: {\r\n        addItem: (state, action) => {\r\n            state.items.push(action.payload)\r\n        },\r\n        isDoneItem: (state, action) => {\r\n            state.items.forEach((item) => {\r\n                if (item.id === action.payload) {\r\n                    return item.isDone = true\r\n                }\r\n            })\r\n        },\r\n        showingForm: (state, action) => {\r\n            state.toggleForm = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const {addItem, isDoneItem, showingForm} = toDoSlice.actions\r\nexport default toDoSlice.reducer\r\n","import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addItem, showingForm} from \"../../features/toDo/toDoSlice\";\r\nimport uniqid from \"uniqid\"\r\n\r\nfunction Form() {\r\n    const dispatch = useDispatch()\r\n    const ref = useRef(\"\")\r\n    const onSubmit = (data) => {\r\n        dispatch(showingForm(false))\r\n        dispatch(addItem({\r\n            id: uniqid(),\r\n            date: new Date().toLocaleDateString(),\r\n            task: data,\r\n            isDone: false\r\n        }))\r\n    }\r\n    // Field focus\r\n    useEffect(() => {\r\n        ref.current.focus()\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div className={\"card card-body\"}>\r\n                <form className={\" d-flex flex-column\"} onSubmit={() => {\r\n                    onSubmit(ref.current.value)\r\n                }}>\r\n                    <label className={\"fw-bold text-center h3\"} htmlFor=\"newTask\">Complete List</label>\r\n                    <input ref={ref} type=\"text\" className={\"form-control text-center my-2\"}/>\r\n                    <input className={\"btn btn-success my-2\"} type=\"submit\" value={\"Add New Item\"}/>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport styles from \"./showingList.module.scss\"\r\nimport {isDoneItem} from \"../../features/toDo/toDoSlice\";\r\n\r\nfunction ShowingList() {\r\n    const selector = useSelector((state) => {\r\n        return state.toDoItems.items\r\n    })\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className={\"m-5 p-2\"} id={styles.container}>\r\n            <h3\r\n                className={\"text-light fw-bold bg-dark d-flex flex-row justify-content-center mb-2 p-2 rounded align-items-center\"}>\r\n                <div className={\"mx-5\"}>Content</div>\r\n            </h3>\r\n            <div className={\"d-flex flex-column justify-content-lg-around mx-5\"}>{selector.map((td) => {\r\n                return (\r\n                    td.isDone ?\r\n                    (<div key={td.id} className={\"bg-light\"} >\r\n                        <div className={\"d-flex justify-content-between align-items-center \"}>\r\n                            <div className={\"h5 fw-bold mx-5 text-danger\"}>Is done</div>\r\n                            <h5 key={td.item} className={\"text-muted text-decoration-line-through\"}>{td.task}</h5>\r\n                            <input className={styles.remove} type=\"submit\" value={\"X\"} onClick={() => {\r\n                                dispatch(isDoneItem(td.id))\r\n                            }}/>\r\n                        </div>\r\n                    </div>) : (<div key={td.id}>\r\n                            <div className={\"d-flex justify-content-between align-items-center \"}>\r\n                                <code className={\"h5 fw-bold mx-5 text-success\"}>{td.date} </code>\r\n                                <h5 key={td.item}>{td.task}</h5>\r\n                                <input className={styles.remove} type=\"submit\" value={\"X\"} onClick={() => {\r\n                                    dispatch(isDoneItem(td.id))\r\n                                }}/>\r\n                            </div>\r\n                        </div>)\r\n                )\r\n            })}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowingList","import React from 'react';\r\nimport styleActionToDo from \"./addItem.module.scss\"\r\nimport Form from \"../../form/Form\";\r\nimport ShowingList from \"../../showingList/ShowingList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {showingForm} from \"../../../features/toDo/toDoSlice\";\r\n\r\nfunction AddItem() {\r\n    const selector = useSelector((state) => {\r\n        return state.toDoItems.toggleForm\r\n    })\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <div>\r\n            {selector ? <Form/> : <ShowingList/>}\r\n            <section className={styleActionToDo.container}>\r\n                <button className={styleActionToDo.more} onClick={() => {\r\n                    dispatch(showingForm(true))\r\n                }}> +\r\n                </button>\r\n                <button className={styleActionToDo.completed}>clear</button>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItem;","import React, {useRef, useState} from \"react\"\nimport './App.scss';\nimport AddItem from \"./components/actionBar/addItem/AddItem\";\nimport {showingForm} from \"./features/toDo/toDoSlice\";\nimport {useDispatch} from \"react-redux\";\n\nfunction App() {\n    const [listTitle, setListTitle] = useState(\"\")\n    const titleRef = useRef(null)\n    const dispatch = useDispatch()\n\n\n    function inputFocus(item) {\n        item.current.focus()\n    }\n\n    function changeTitle() {\n        setListTitle(titleRef.current.value)\n    }\n\n\n    return (\n        <>\n            <div id={\"container\"} className = \"App card card-body overflow-scroll position-relative\">\n                <h1 className={\n                    \"fw-bold text-center p-2\" +\n                    \"  w-50 mx-auto mt-2 text-dark\"\n                } id={\"title\"}>\n                    {listTitle}\n                </h1>\n                <input ref={titleRef} className={'w-25 mx-auto bg-light'} type=\"text\" onChange={() => {\n                    changeTitle()\n                }} id={'title'} placeholder={'Enrez le titre de votre liste'}/>\n\n                    <AddItem toggleDisplayForm={dispatch(showingForm)} inputRef={inputFocus}/>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport toDoReducer from \"../features/toDo/toDoSlice\"\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        toDoItems: toDoReducer\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nconsole.log(store.getState())\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completed\":\"addItem_completed__3qyO-\",\"container\":\"addItem_container__PG8qI\",\"more\":\"addItem_more__UEulk\",\"search\":\"addItem_search__GKLL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"showingList_container__2q8kx\",\"remove\":\"showingList_remove__2DWY5\"};"],"sourceRoot":""}